rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection - allow authenticated users to read/write their own profile
    match /users/{userId} {
      // Users can read, create, update, delete their own profile
      allow read, create, update, delete: if isAuthenticated() && isOwner(userId);
      
      // Admins can read, update, delete any user profile
      allow read, update, delete: if isAdmin();
    }
    
    // Places collection - for boarding/rental listings
    match /places/{placeId} {
      // Anyone can read places (public listings)
      allow read: if true;
      
      // Only authenticated users can create places
      allow create: if isAuthenticated();
      
      // Only the owner can update/delete their place OR admins can manage any place
      allow update, delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
    }
    
    // Posts collection - for rental property posts
    match /posts/{postId} {
      // Anyone can read posts (public listings)
      allow read: if true;
      
      // Only authenticated users can create posts
      allow create: if isAuthenticated();
      
      // Only the owner can update/delete their post OR admins can manage any post
      allow update, delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
    }
  }
}

